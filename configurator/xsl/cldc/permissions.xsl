<?xml version="1.0" encoding="UTF-8"?>
<!--
        Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
        DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
        
        This program is free software; you can redistribute it and/or
        modify it under the terms of the GNU General Public License version
        2 only, as published by the Free Software Foundation.
        
        This program is distributed in the hope that it will be useful, but
        WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
        General Public License version 2 for more details (a copy is
        included at /legal/license.txt).
        
        You should have received a copy of the GNU General Public License
        version 2 along with this work; if not, write to the Free Software
        Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
        02110-1301 USA
        
        Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
        Clara, CA 95054 or visit www.sun.com if you need additional
        information or have any questions.
-->
<!--
    This stylesheet generates source code of com.sun.cdc.config.PackageManager
    class. Output code is intended for temporary use only, until real
    PackageManager with capability of enumerating dynamically loaded
    packages is implemented.
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>


<xsl:template match="/">
<xsl:text>/*
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 *
 */

/*
 * This file is automatically generated. Do not edit.
 */

package com.sun.midp.security;

import java.util.Hashtable;
import java.util.Enumeration;
import com.sun.midp.i18n.ResourceConstants;

public final class ExtendedPermissions {
</xsl:text>
    <xsl:for-each select="/configuration/permissions/group">
        <xsl:for-each select="permission">
<xsl:text>    /** </xsl:text>
<xsl:value-of select="@Name"/>
<xsl:text> permission ID. */
    public static final int </xsl:text>
<xsl:value-of select="@ID"/>
<xsl:text> =
        Permissions.NUMBER_OF_PERMISSIONS++;
</xsl:text>
        </xsl:for-each>
    </xsl:for-each>

    <xsl:for-each select="/configuration/permissions/group">
        <xsl:if test="string-length(@Comment)">
<xsl:text>
    /** </xsl:text>
<xsl:value-of select="@Comment"/>
<xsl:text> */
</xsl:text>
        </xsl:if>
<xsl:text>    static final PermissionGroup </xsl:text>
<xsl:value-of select="@ID"/>
<xsl:text> =
        new PermissionGroup(</xsl:text>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@Name"/>
        </xsl:call-template>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@Question"/>
        </xsl:call-template>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@DisableChoice"/>
        </xsl:call-template>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@RuntimeTitle"/>
        </xsl:call-template>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@RuntimeQuestion"/>
        </xsl:call-template>
        <xsl:call-template name="processParam">
            <xsl:with-param name="param" select="@RuntimeOneshot"/>
        </xsl:call-template>
<xsl:text>
            Permissions.</xsl:text>
<xsl:value-of select="@IdentifiedMaximum"/>
<xsl:text>, Permissions.</xsl:text>
<xsl:value-of select="@IdentifiedDefault"/>
<xsl:text>, Permissions.</xsl:text>
<xsl:value-of select="@UnidentifiedMaximum"/>
<xsl:text>, Permissions.</xsl:text>
<xsl:value-of select="@UnidentifiedDefault"/>
<xsl:text>);
</xsl:text>
    </xsl:for-each>
<xsl:text>
    /** Permission specifications. */
    static final PermissionSpec[] permissionSpecs = {
        new PermissionSpec(Permissions.MIDP_PERMISSION_NAME, Permissions.NEVER_GROUP),
        new PermissionSpec(Permissions.AMS_PERMISSION_NAME, Permissions.NEVER_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.http",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.socket",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.https",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.ssl",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.serversocket",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.datagram",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.datagramreceiver",
            Permissions.NET_ACCESS_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.comm",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.PushRegistry",
            Permissions.AUTO_INVOCATION_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.sms",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.cbs",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.wireless.messaging.sms.send",
            Permissions.SEND_MESSAGE_GROUP),
        new PermissionSpec("javax.wireless.messaging.sms.receive",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.wireless.messaging.cbs.receive",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.microedition.media.control.RecordControl",
            Permissions.MULTIMEDIA_GROUP),
        new PermissionSpec(
            "javax.microedition.media.control.VideoControl.getSnapshot",
            Permissions.MULTIMEDIA_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.mms",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.wireless.messaging.mms.send",
            Permissions.SEND_MESSAGE_GROUP),
        new PermissionSpec("javax.wireless.messaging.mms.receive",
            Permissions.READ_MESSAGE_GROUP),
        new PermissionSpec("javax.microedition.apdu.aid",
            Permissions.SMART_CARD_GROUP),
        new PermissionSpec("javax.microedition.jcrmi",
            Permissions.SMART_CARD_GROUP),
        new PermissionSpec(
            "javax.microedition.securityservice.CMSMessageSignatureService",
            Permissions.AUTHENTICATION_GROUP),
        new PermissionSpec("javax.microedition.apdu.sat",
            Permissions.SMART_CARD_GROUP),
        new PermissionSpec("javax.microedition.content.ContentHandler",
            Permissions.AUTO_INVOCATION_GROUP),
        new PermissionSpec("javax.microedition.pim.ContactList.read",
            Permissions.READ_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.pim.ContactList.write",
            Permissions.WRITE_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.pim.EventList.read",
            Permissions.READ_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.pim.EventList.write",
            Permissions.WRITE_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.pim.ToDoList.read",
            Permissions.READ_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.pim.ToDoList.write",
            Permissions.WRITE_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.file.read",
            Permissions.READ_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.file.write",
            Permissions.WRITE_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.obex.client",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.obex.server",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.obex.client.tcp",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.obex.server.tcp",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.bluetooth.client",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.bluetooth.server",
            Permissions.LOCAL_CONN_GROUP),
        new PermissionSpec("javax.microedition.location.Location",
            Permissions.LOCATION_GROUP),
        new PermissionSpec("javax.microedition.location.Orientation",
            Permissions.LOCATION_GROUP),
        new PermissionSpec("javax.microedition.location.ProximityListener",
            Permissions.LOCATION_GROUP),
        new PermissionSpec("javax.microedition.location.LandmarkStore.read",
            Permissions.LANDMARK_GROUP),
        new PermissionSpec("javax.microedition.location.LandmarkStore.write",
            Permissions.LANDMARK_GROUP),
        new PermissionSpec(
            "javax.microedition.location.LandmarkStore.category",
            Permissions.LANDMARK_GROUP),
        new PermissionSpec(
            "javax.microedition.location.LandmarkStore.management",
            Permissions.LANDMARK_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.sip",
            Permissions.CALL_CONTROL_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.sips",
            Permissions.CALL_CONTROL_GROUP),
        new PermissionSpec("javax.microedition.payment.process",
            Permissions.ID_ALLOWED_GROUP),
        new PermissionSpec(
            "javax.microedition.amms.control.camera.enableShutterFeedback",
            Permissions.MULTIMEDIA_GROUP),
        new PermissionSpec(
            "javax.microedition.amms.control.tuner.setPreset",
            Permissions.WRITE_USER_DATA_GROUP),
        new PermissionSpec("javax.microedition.io.Connector.sensor",
            Permissions.SENSOR_GROUP),
        new PermissionSpec("javax.microedition.sensor.PrivateSensor",
            Permissions.SENSOR_GROUP),
        new PermissionSpec("javax.microedition.sensor.ProtectedSensor",
            Permissions.SENSOR_GROUP),
</xsl:text>
    <xsl:for-each select="/configuration/permissions/group">
        <xsl:for-each select="permission">
<xsl:text>        new PermissionSpec("</xsl:text>
<xsl:value-of select="@Name"/>
<xsl:text>",
            </xsl:text>
<xsl:value-of select="../@ID"/>
<xsl:text>),
</xsl:text>
        </xsl:for-each>
    </xsl:for-each>
<xsl:text>    };
}
</xsl:text>
</xsl:template>

<!-- generate actual parameters -->
<xsl:template name="processParam">
<!-- template parameter: raw value of parameter for PermissionGroup constructor -->
<xsl:param name="param"/>
    <xsl:choose>
        <!-- when the parameter is not empty, add it as a resource constant -->
        <xsl:when test="string-length($param)">
<xsl:text>
            ResourceConstants.</xsl:text>
            <xsl:value-of select="$param"/>
<xsl:text>,</xsl:text>
        </xsl:when>
        <xsl:otherwise>
<xsl:text> 0,</xsl:text>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

</xsl:stylesheet>
